--- boost/archive/iterators/transform_width.hpp
+++ boost/archive/iterators/transform_width.hpp
@@ -29,6 +29,7 @@

 #include <boost/iterator/iterator_adaptor.hpp>
 #include <boost/iterator/iterator_traits.hpp>
+#include <algorithm>

 namespace boost { 
 namespace archive {
--- boost/config/compiler/visualc.hpp
+++ boost/config/compiler/visualc.hpp
@@ -180,13 +180,13 @@
 #  define BOOST_NO_CXX11_TRAILING_RESULT_TYPES
 #  define BOOST_NO_CXX11_VARIADIC_TEMPLATES
 #  define BOOST_NO_CXX11_UNIFIED_INITIALIZATION_SYNTAX
+#  define BOOST_NO_CXX11_DECLTYPE_N3276
 #endif

 // C++11 features not supported by any versions
 #define BOOST_NO_CXX11_CHAR16_T
 #define BOOST_NO_CXX11_CHAR32_T
 #define BOOST_NO_CXX11_CONSTEXPR
-#define BOOST_NO_CXX11_DECLTYPE_N3276
 #define BOOST_NO_CXX11_NOEXCEPT
 #define BOOST_NO_CXX11_UNICODE_LITERALS
 #define BOOST_NO_SFINAE_EXPR
--- libs/config/test/no_decltype_n3276_fail.cpp
+++ libs/config/test/no_decltype_n3276_fail.cpp
@@ -32,6 +32,6 @@

 int main( int, char *[] )
 {
-   return boost_no_decltype_n3276::test();
+   return boost_no_cxx11_decltype_n3276::test();
 }

--- libs/config/test/no_decltype_n3276_pass.cpp
+++ libs/config/test/no_decltype_n3276_pass.cpp
@@ -27,11 +27,11 @@
 #ifndef BOOST_NO_CXX11_DECLTYPE_N3276
 #include "boost_no_decltype_n3276.ipp"
 #else
-namespace boost_no_decltype_n3276 = empty_boost;
+namespace boost_no_cxx11_decltype_n3276 = empty_boost;
 #endif

 int main( int, char *[] )
 {
-   return boost_no_decltype_n3276::test();
+   return boost_no_cxx11_decltype_n3276::test();
 }
